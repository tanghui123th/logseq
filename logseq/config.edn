{:journal-basis "daily" 
 :date-formatter "yyyy-MM-dd"
 
 :project {
           ;; Selected public notes can be published to https://logseq.com/your-project-or-your-username.
           :name ""
           :alias ""
           ;; your twitter handle
           :twitter ""
           ;; description supports both hiccup and html
           :description ""}

 ;; Currently, we support either "Markdown" or "Org".
 ;; This can overwrite your global preference so that
 ;; maybe your personal preferred format is Org but you'd
 ;; need to use Markdown for some projects.
 ;; :preferred-format ""

 ;; Git settings
 :git-pull-secs 60
 :git-push-secs 10
 :git-auto-push true

 ;; The app will ignore those directories or files.
 ;; E.g. "/archived" "/test.md"
 :hidden []

 ;; When creating the new journal page, the app will use your template content here.
 ;; Example for Markdown users: "## [[Work]]\n###\n## [[Family]]\n###\n
 ;; Example for Org mode users: "** [[Work]]\n***\n** [[Family]]\n***\n
 :default-templates
 {:journals ""}

 ;; The app will show those queries in today's journal page,
 ;; the "NOW" query asks the tasks which need to be finished "now",
 ;; the "NEXT" query asks the future tasks.
 :default-queries
 {:journals
  [{:title "-> NOW"
    :query [:find (pull ?h [*])
            :in $ ?start ?today
            :where
            [?h :block/marker ?marker]
            [?h :block/page ?p]
            [?p :page/journal? true]
            [?p :page/journal-day ?d]
            [(>= ?d ?start)]
            [(<= ?d ?today)]
            [(contains? #{"NOW" "DOING"} ?marker)]]
    :inputs [:30d :today]
    :result-transform (fn [result]
                        (sort-by (fn [h]
                                   (get h :block/priority "Z")) result))
    :collapsed? false}

   {:title "ğŸ–‹ æœ€è¿‘æ›´æ–°"
 :query [:find (pull ?p [*])
         :in $ ?start
         :where
         [?p :page/last-modified-at ?d]
         [?p :page/name ?n]
         [(>= ?d ?start)]
         [(not= ?n "contents")]]
 :inputs [:4d-before]
 :view (fn [result]
  (for [p (take 4 (sort-by :page/last-modified-at > result))]
    [:div.ls-block.flex.flex-col.pt-1
      [:div.flex-1.flex-row
        [:div.mr-2.flex.flex-row.items-center
          {:style {:height "24px" :margin-top "0" :float "left"}}
          [:a.block-control.opacity-50.hover:opacity-100
            {:style {:min-width "0" :height "16px" :margin-right "2px"}}
            [:span]]
          [:a
            {:href (str "/page/" (:page/name p))}
            [:span.bullet-container.cursor
              [:span.bullet]]]]
        [:div.flex.relative
          [:div.flex-1.flex-col.relative.block-content
            [:div
              [:span.page-reference
                [:a.page-ref
                  {:href (str "/page/" (:page/name p))}
                  (-> p :page/properties :title)]]]]]]]))}
   
   {:title "ğŸ“… NEXT"
    :query [:find (pull ?h [*])
            :in $ ?start ?next
            :where
            [?h :block/marker ?marker]
            [?h :block/ref-pages ?p]
            [?p :page/journal? true]
            [?p :page/journal-day ?d]
            [(> ?d ?start)]
            [(< ?d ?next)]
            [(contains? #{"NOW" "LATER" "TODO"} ?marker)]]
    :inputs [:today :7d-after]
    
    :collapsed? false}

    ]}

 ;; Add your own commands to speedup.
 ;; E.g. [["js" "Javascript"]]
 :commands
 []

 ;; Macros replace texts and will make you more productive.
 ;; For example:
 ;; Add this to the macros below:
 ;; {"poem" "Rose is $1, violet's $2. Life's ordered: Org assists you."}
 ;; input "{{{poem(red,blue)}}}"
 ;; becomes
 ;; Rose is red, violet's blue. Life's ordered: Org assists you.
 :macros {}
   :ui/show-brackets? false
 :feature/enable-journals? true
 :default-home {}}